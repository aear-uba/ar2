# -*- coding: utf-8 -*-
"""ddpg_gymnasium_sb3_01.ipynb

Automatically generated by Colab.

"""
# ---------  Algoritmo DDPG aplicado a alunizaje   -------- #
#
# ------  UBA - Aprendizaje por Refuerzo II - 2025  ------ #
#

!apt-get update
!apt-get install -y xvfb python-opengl ffmpeg swig build-essential > /dev/null 2>&1
!pip install swig
!pip install gymnasium[box2d]
!pip install stable-baselines3[extra] moviepy
!pip install pyvirtualdisplay > /dev/null 2>&1
print("--- Instalaci√≥n de dependencias completada ---")

import os
import gymnasium
from stable_baselines3 import DDPG
from stable_baselines3.common.env_util import make_vec_env
from stable_baselines3.common.vec_env import VecVideoRecorder
from stable_baselines3.common.noise import OrnsteinUhlenbeckActionNoise
import numpy as np

print("Stable Baselines3 importado correctamente.")

env_id = 'LunarLanderContinuous-v3'
video_folder = 'logs/videos/'
video_length = 1000
log_dir = "/tmp/gym/"
os.makedirs(log_dir, exist_ok=True)
os.makedirs(video_folder, exist_ok=True)

train_env = gymnasium.make(env_id)
record_env_raw = gymnasium.make(env_id, render_mode='rgb_array')

n_actions = train_env.action_space.shape[-1]
action_noise = OrnsteinUhlenbeckActionNoise(mean=np.zeros(n_actions), sigma=0.1 * np.ones(n_actions))

model = DDPG(
    policy='MlpPolicy',
    env=train_env,
    action_noise=action_noise,
    learning_rate=1e-3,
    buffer_size=200_000,
    learning_starts=10000,
    batch_size=128,
    tau=0.005,
    gamma=0.99,
    gradient_steps=-1,
    train_freq=1,
    verbose=1,
    seed=42
)

print("Iniciando entrenamiento con DDPG...")
model.learn(total_timesteps=200_000)
print("Entrenamiento completado.")

print("Grabando video del alunizaje continuo...")
record_env = VecVideoRecorder(make_vec_env(lambda: record_env_raw, n_envs=1), video_folder,
                           record_video_trigger=lambda x: x == 0, video_length=video_length,
                           name_prefix=f"ddpg-{env_id}")

obs = record_env.reset()
for _ in range(video_length + 1):
    action, _ = model.predict(obs, deterministic=True)
    obs, rewards, dones, info = record_env.step(action)
    if dones[0]:
        break

record_env.close()
print(f"Video guardado en la carpeta: {video_folder}")